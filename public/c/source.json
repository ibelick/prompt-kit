{
  "name": "source",
  "type": "registry:ui",
  "registryDependencies": [
    "hover-card"
  ],
  "dependencies": [],
  "devDependencies": [],
  "tailwind": {},
  "cssVars": {
    "light": {},
    "dark": {}
  },
  "description": "Displays website sources used by AI-generated content, showing URL details, titles, and descriptions on hover.",
  "files": [
    {
      "path": "source.tsx",
      "content": "\"use client\"\n\nimport {\n  HoverCard,\n  HoverCardContent,\n  HoverCardTrigger,\n} from \"@/components/ui/hover-card\"\nimport { cn } from \"@/lib/utils\"\nimport { createContext, useContext } from \"react\"\n\nconst SourceContext = createContext<{\n  href: string\n  domain: string\n} | null>(null)\n\nfunction useSourceContext() {\n  const ctx = useContext(SourceContext)\n  if (!ctx) throw new Error(\"Source.* must be used inside <Source>\")\n  return ctx\n}\n\nexport type SourceProps = {\n  href: string\n  children: React.ReactNode\n}\n\nexport function Source({ href, children }: SourceProps) {\n  let domain = \"\"\n  try {\n    domain = new URL(href).hostname\n  } catch {\n    domain = href.split(\"/\").pop() || href\n  }\n\n  return (\n    <SourceContext.Provider value={{ href, domain }}>\n      <HoverCard openDelay={150} closeDelay={0}>\n        {children}\n      </HoverCard>\n    </SourceContext.Provider>\n  )\n}\n\nexport type SourceTriggerProps = {\n  label?: string | number\n  showFavicon?: boolean\n  className?: string\n}\n\nexport function SourceTrigger({\n  label,\n  showFavicon = false,\n  className,\n}: SourceTriggerProps) {\n  const { href, domain } = useSourceContext()\n  const labelToShow = label ?? domain.replace(\"www.\", \"\")\n\n  return (\n    <HoverCardTrigger asChild>\n      <a\n        href={href}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className={cn(\n          \"bg-muted text-muted-foreground hover:bg-muted-foreground/30 hover:text-primary inline-flex h-5 max-w-32 items-center gap-1 overflow-hidden rounded-full py-0 text-xs leading-none no-underline transition-colors duration-150\",\n          showFavicon ? \"pr-2 pl-1\" : \"px-1\",\n          className\n        )}\n      >\n        {showFavicon && (\n          <img\n            src={`https://www.google.com/s2/favicons?sz=64&domain_url=${encodeURIComponent(\n              href\n            )}`}\n            alt=\"favicon\"\n            width={14}\n            height={14}\n            className=\"size-3.5 rounded-full\"\n          />\n        )}\n        <span className=\"truncate text-center font-normal\">{labelToShow}</span>\n      </a>\n    </HoverCardTrigger>\n  )\n}\n\nexport type SourceContentProps = {\n  title: string\n  description: string\n  className?: string\n}\n\nexport function SourceContent({\n  title,\n  description,\n  className,\n}: SourceContentProps) {\n  const { href, domain } = useSourceContext()\n\n  return (\n    <HoverCardContent className={cn(\"w-80 p-0 shadow-xs\", className)}>\n      <a\n        href={href}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"flex flex-col gap-2 p-3\"\n      >\n        <div className=\"flex items-center gap-1.5\">\n          <img\n            src={`https://www.google.com/s2/favicons?sz=64&domain_url=${encodeURIComponent(\n              href\n            )}`}\n            alt=\"favicon\"\n            className=\"size-4 rounded-full\"\n            width={16}\n            height={16}\n          />\n          <div className=\"text-primary truncate text-sm\">\n            {domain.replace(\"www.\", \"\")}\n          </div>\n        </div>\n        <div className=\"line-clamp-2 text-sm font-medium\">{title}</div>\n        <div className=\"text-muted-foreground line-clamp-2 text-sm\">\n          {description}\n        </div>\n      </a>\n    </HoverCardContent>\n  )\n}\n",
      "type": "registry:ui"
    }
  ]
}